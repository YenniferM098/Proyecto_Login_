import { Fido2Lib } from 'fido2-lib';
import { poolPromise } from '../config/db.config.js';
import sql from 'mssql';
import pkg from 'cbor';
const { decodeFirstSync } = pkg;


const f2l = new Fido2Lib({
  timeout: 60000,
  rpId: "localhost",
  rpName: "Sistema Auth",
  challengeSize: 32,
  attestation: "none",
  cryptoParams: [-7, -257], // ES256 y RS256
  authenticatorAttachment: "platform",
  authenticatorRequireResidentKey: false,
  authenticatorUserVerification: "required"
});

// FUNCI√ìN PARA REGISTRO (Attestation)
export async function verifyAttestationResponse(attestationResponse, expectedChallenge, correo) {
  try {
    console.log("üîê Iniciando verificaci√≥n de REGISTRO (attestation)...");
    console.log("üìß Correo:", correo);
    console.log("üé´ Challenge esperado:", expectedChallenge);

    // Decodificar el clientDataJSON (viene como ArrayBuffer)
    const decoder = new TextDecoder('utf-8');
    const clientDataJSON = decoder.decode(attestationResponse.response.clientDataJSON);
    const clientData = JSON.parse(clientDataJSON);
    const challengeFromClient = clientData.challenge;
    
    console.log("üîç Challenge desde clientData:", challengeFromClient);
    console.log("üìã ClientData completo:", clientData);

    // Preparar expectativas para la atestaci√≥n usando el challenge del cliente
    const attestationExpectations = {
      challenge: challengeFromClient,
      origin: "http://localhost:4200",
      factor: "either"
    };

    console.log("üìã Expectativas de atestaci√≥n:", attestationExpectations);

    console.log("üîç Llamando a f2l.attestationResult...");
    
    let result;
    try {
      result = await f2l.attestationResult(attestationResponse, attestationExpectations);
      console.log("‚úÖ attestationResult ejecutado correctamente");
    } catch (attestationError) {
      console.error("‚ö†Ô∏è Error en attestationResult:", attestationError.message);
      
      // Si falla por TPM, intentamos extraer la clave p√∫blica manualmente
      if (attestationError.message.includes('tpm') || attestationError.message.includes('TPM')) {
        console.log("üîß Intentando extracci√≥n manual de clave p√∫blica...");
        
        try {
          // Decodificar el attestationObject usando CBOR
          const attestationObjectBuffer = Buffer.from(attestationResponse.response.attestationObject);
          console.log("üì¶ Buffer de attestationObject creado, longitud:", attestationObjectBuffer.length);
          
          const attestationObject = decodeFirstSync(attestationObjectBuffer);
          
          console.log("üì¶ AttestationObject decodificado:", {
            fmt: attestationObject.fmt,
            hasAuthData: !!attestationObject.authData
          });
          
          if (attestationObject.authData) {
            const authData = Buffer.from(attestationObject.authData);
            console.log("‚úÖ AuthData encontrado, longitud:", authData.length);
            
            // Extraer informaci√≥n b√°sica del authData
            const rpIdHash = authData.slice(0, 32);
            const flags = authData[32];
            const counter = authData.readUInt32BE(33);
            
            console.log("üìä Datos extra√≠dos:", {
              rpIdHashLength: rpIdHash.length,
              flags: flags.toString(2).padStart(8, '0'),
              counter: counter,
              hasCredentialData: !!(flags & 0x40) // Bit 6 indica presencia de credential data
            });
            
            // Guardar el authData completo como "clave p√∫blica"
            // En un sistema real, aqu√≠ extraer√≠as el COSE key del credential data
            const publicKeyData = authData.toString('base64');
            
            console.log("‚úÖ Datos biom√©tricos extra√≠dos manualmente");
            console.log("üìè Longitud de datos de clave p√∫blica:", publicKeyData.length);
            
            return {
              publicKey: publicKeyData,
              counter: counter,
              credentialId: attestationResponse.id,
              extractedManually: true
            };
          } else {
            throw new Error("No se encontr√≥ authData en attestationObject");
          }
        } catch (manualError) {
          console.error("‚ùå Error en extracci√≥n manual:", manualError);
          console.error("Stack de error manual:", manualError.stack);
          throw new Error(`No se pudo extraer la clave p√∫blica: ${manualError.message}`);
        }
      }
      
      throw attestationError;
    }
    
    console.log("‚úÖ Resultado de attestationResult:", {
      hasAuthnrData: !!result.authnrData,
      hasPublicKey: !!result.authnrData?.get('credentialPublicKeyPem'),
      counter: result.authnrData?.get('counter')
    });

    // Extraer la clave p√∫blica
    const publicKeyPem = result.authnrData.get('credentialPublicKeyPem');
    
    if (!publicKeyPem) {
      console.error("‚ùå No se pudo extraer la clave p√∫blica del resultado");
      return { error: "No se pudo extraer la clave p√∫blica" };
    }

    console.log("‚úÖ Clave p√∫blica extra√≠da exitosamente");
    console.log("üìè Longitud de clave p√∫blica:", publicKeyPem.length);

    return {
      publicKey: publicKeyPem,
      counter: result.authnrData.get('counter') || 0,
      credentialId: attestationResponse.id
    };

  } catch (error) {
    console.error("‚ùå Error al verificar la atestaci√≥n:", error);
    console.error("Stack trace:", error.stack);
    return { error: error.message || "Error al verificar la atestaci√≥n" };
  }
}

// FUNCI√ìN PARA LOGIN (Assertion) - Para uso futuro
export async function verifyAssertionResponse(assertionResponse, correo) {
  try {
    console.log("üîê Iniciando verificaci√≥n de LOGIN (assertion)...");
    console.log("üìß Correo:", correo);

    // Recuperar la clave p√∫blica del usuario de la BD
    const pool = await poolPromise;
    const userResult = await pool
      .request()
      .input("correo", sql.NVarChar, correo)
      .query("SELECT publicKey, prevCounter, credentialId FROM Usuarios WHERE correo = @correo");

    if (userResult.recordset.length === 0) {
      console.log("‚ùå Usuario no encontrado:", correo);
      return { error: "Usuario no encontrado" };
    }

    const user = userResult.recordset[0];
    console.log("‚úÖ Usuario encontrado, tiene clave p√∫blica:", !!user.publicKey);

    if (!user.publicKey) {
      console.log("‚ùå No hay clave p√∫blica registrada para el usuario");
      return { error: "No se encontr√≥ la clave p√∫blica" };
    }

    // Decodificar clientDataJSON
    const decoder = new TextDecoder('utf-8');
    const clientDataJSON = decoder.decode(assertionResponse.response.clientDataJSON);
    const clientData = JSON.parse(clientDataJSON);

    // Preparar expectativas para la aserci√≥n
    const assertionExpectations = {
      challenge: clientData.challenge,
      origin: "http://localhost:4200",
      factor: "either",
      publicKey: user.publicKey,
      prevCounter: user.prevCounter || 0,
      userHandle: Buffer.from(correo).toString('base64')
    };

    console.log("üìã Expectativas de aserci√≥n preparadas");

    // Verificar la aserci√≥n
    const result = await f2l.assertionResult(assertionResponse, assertionExpectations);
    
    console.log("‚úÖ Aserci√≥n verificada exitosamente");

    // Actualizar el contador en la BD
    await pool
      .request()
      .input("prevCounter", sql.Int, result.authnrData.get('counter'))
      .input("correo", sql.NVarChar, correo)
      .query("UPDATE Usuarios SET prevCounter = @prevCounter WHERE correo = @correo");

    console.log("‚úÖ Contador actualizado en BD");

    return {
      verified: true,
      counter: result.authnrData.get('counter')
    };

  } catch (error) {
    console.error("‚ùå Error al verificar la aserci√≥n:", error);
    console.error("Stack trace:", error.stack);
    return { error: error.message || "Error al verificar la aserci√≥n" };
  }
}